#‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñë‚ñà‚ñà‚ñà‚ñë‚ñà‚ñà‚ñà‚ñë‚ñà‚ñà‚ñà‚ñë‚ñà‚ñà‚ñà
#‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñë‚ñà‚ñë‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë‚ñà‚ñë‚ñë‚ñë‚ñà‚ñë‚ñà
#‚ñë‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë‚ñà‚ñà‚ñà‚ñë‚ñë‚ñà‚ñë‚ñë‚ñà‚ñë‚ñà‚ñë‚ñà‚ñë‚ñà
#‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë‚ñà‚ñë‚ñà‚ñë‚ñà‚ñë‚ñà
#‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñë‚ñà‚ñà‚ñà‚ñë‚ñë‚ñà‚ñë‚ñë‚ñà‚ñà‚ñà‚ñë‚ñà‚ñà‚ñà

# meta developer: @ZetGo
import asyncio, herokutl, math, io
from herokutl.tl.types import MessageService
from herokutl.tl.functions.channels import GetFullChannelRequest
from .. import loader, utils

CHECK_DELAY = 0.7
SCAM_DELAY = 1
@loader.tds
class SafeBase(loader.Module):
    """–ù–µ–±–æ–ª—å—à–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ —Å–µ–π—Ñ–±–∞–∑—ã"""
    strings = {
            "name": "SafeBase",
            "noargs": "<emoji document_id=5019523782004441717>‚ùå</emoji> <b>–ö–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞ –±–µ–∑ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤</b>",
            "part_collect": "<emoji document_id=5361756993876954306>‚åõÔ∏è</emoji> <b>–°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö...</b>",
            "additional": "<emoji document_id=5361756993876954306>‚åõÔ∏è</emoji> <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Ç—Å–Ω–∏–∫–æ–≤ –Ω–µ —Å–æ–≤–ø–∞–ª–æ —Å —Ä–µ–∞–ª—å–Ω—ã–º. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö {} —Å–æ–æ–±—â–µ–Ω–∏–π. –≠—Ç–æ –∑–∞–π–º—ë—Ç ~{} —Å–µ–∫.</b>",
            "checking_users": "<emoji document_id=5364035851984603413>üí™</emoji> <b>–ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞–ª–∏—á–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Å–∫–∞–º –±–∞–∑–µ...\n–≠—Ç–æ –∑–∞–π–º—ë—Ç ~{} —Å–µ–∫.</b>",
            "all_in_base": "<emoji document_id=5361900011992942703>ü•á</emoji> <b>–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ @{} —É–∂–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –±–∞–∑–µ</b>",
            "part_list": "<emoji document_id=5361940169937158185>ü•á</emoji> <b>–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã @{}:</b>\n<blockquote expandable>{}</blockquote>",
            "file_part_list": "<emoji document_id=5361940169937158185>ü•á</emoji> <b>–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã @{}",
            "stop_cycle": "–í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã",
            "stop": "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å",
            "no_shct": "<emoji document_id=5019523782004441717>‚ùå</emoji> <b>–®–æ—Ä—Ç–∫–∞—Ç–∞ {} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</b>",
            "answer_file": "<emoji document_id=5019523782004441717>‚ùå</emoji> <b>–í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ñ–∞–π–ª!</b>",
            "no_ids": "<emoji document_id=5019523782004441717>‚ùå</emoji> <b>–í —Ñ–∞–π–ª–µ –Ω–µ—Ç id –ª—é–¥–µ–π</b>",
            "inv_shct": """<emoji document_id=5019523782004441717>‚ùå</emoji> <b>–®–æ—Ä—Ç–∫–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã:</b>
<code>.addscam scamgroup /scam {account} 2 –£—á–∞—Å—Ç–Ω–∏–∫ —Å–∫–∞–º-—Ç–∏–º—ã {link}</code>""",
            "shct_set": "<emoji document_id=5361940169937158185>ü•á</emoji> <b>–®–æ—Ä—Ç–∫–∞—Ç <code>{}</code> —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>",
            "shct_rm": "<emoji document_id=5361940169937158185>ü•á</emoji> <b>–®–æ—Ä—Ç–∫–∞—Ç <code>{}</code> —É–¥–∞–ª—ë–Ω!</b>",
            "entr_to_base": "<emoji document_id=5364035851984603413>üí™</emoji> <b>–ó–∞–Ω–æ—à—É –≤ –±–∞–∑—É {} —á–µ–ª–æ–≤–µ–∫...</b>",
            "succes": "<emoji document_id=5361940169937158185>ü•á</emoji> <b>–£—Å–ø–µ—à–Ω–æ –∑–∞–Ω—ë—Å!</b>",
        }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "check_chat_id",
                7246450592,
                "–ß–∞—Ç —Å @SafeBase_checkbot (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ id —á–∞—Ç–∞,"
                " –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –±–æ—Ç, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞—Å–æ—Ä—è—Ç—å –ª–∏—á–∫—É"
                " —Å –Ω–∏–º)",
                validator=loader.validators.Integer(),
            ),
            loader.ConfigValue(
                "msgs_limit",
                1000,
                "–õ–∏–º–∏—Ç —Å–æ–±–∏—Ä–∞–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞ (–≤–ª–∏—è–µ—Ç –Ω–∞ –≤—Ä–µ–º—è )",
                validator=loader.validators.Integer(),
            ),
            loader.ConfigValue(
                "send_scam_chat",
                7246450592,
                "–ß–∞—Ç, –∫—É–¥–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–Ω–æ—Å–∞ —á–µ–ª–æ–≤–µ–∫–∞ –≤ –±–∞–∑—É",
            ),
        )

    async def client_ready(self):
        if not self.get("shortcuts", {}):
            self.set(
                key="shortcuts",
                value=dict()
            )
        return

    def get_messages_time(self, msgs):
        R = math.ceil(msgs / 100)
        if msgs > 3000:
            mraz = 1 + 0.00005 * (msgs - 3000)
        else:
            mraz = 1
        scnds = R * 0.5 * mraz
        return scnds
    
    async def _stop_getlist(self, call):
        await call.delete()
        self.getlist_c = False

    @loader.command()
    async def getlist(self, message):
        """[group id/username] (file/message) –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã –ª–∏–±–æ –≤ —Ñ–∞–π–ª–µ, –ª–∏–±–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        args = utils.get_args(message)
        if len(args):
            if len(args) < 2:
                args.append("message")
        else:
            return await utils.answer(message, self.strings["noargs"])
        group, output = args[:2]
        group = group.replace("@", "")
        group = int(group) if group.isdigit() else group
        self.client: herokutl.TelegramClient
        entity = await self.client(GetFullChannelRequest(group))

        all_users = [u for u in (await self.client.get_participants(group))]
        ids = set()

        self.getlist_c = True
        form = await self.inline.form(
            self.strings["stop_cycle"],
            message.chat_id,
            reply_markup={
                "text": self.strings["stop"],
                "callback": self._stop_getlist,
            }
        )

        await utils.answer(message, self.strings["part_collect"])
        if len(all_users) != entity.full_chat.participants_count:
            limit = min(self.config["msgs_limit"], (await self.client.get_messages(group, 0, search="+")).total)
            await utils.answer(message, self.strings["additional"].format(
                    self.config["msgs_limit"],
                    self.get_messages_time(self.config["msgs_limit"])
                )
            )
            async for msg in self.client.get_messages(group, limit=limit):
                if self.getlist_c:
                    if msg.sender and not getattr(msg.sender, "bot", True):
                        ids.add(msg.sender.id)
                else:
                    return await message.delete()

        ids |= {us.id for us in all_users if not us.bot}

        ids.discard(self.client.tg_id)

        await utils.answer(message, self.strings["checking_users"].format(
                (CHECK_DELAY + 0.5) * len(ids)
            )
        )
        
        for user in ids.copy():
            if self.getlist_c:
                async with self.client.conversation(self.config["check_chat_id"], exclusive=False) as conv:
                    await conv.send_message(f"—á–µ–∫ {user}")
                    resp = await conv.get_response()
                    if not "–Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π" in resp.text or not "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º" in resp.text:
                        ids.discard(user)
                    await asyncio.sleep(CHECK_DELAY)
            else:
                return await message.delete()

        text = "\n".join(map(str, ids))

        await form.delete()

        if output == "message":
            await utils.answer(message, self.strings["part_list"].format(
                    group,
                    text
                )
            )
        else:
            file = io.BytesIO(text.encode())
            file.name = f"participants_{entity.full_chat.id}.txt"
            await utils.answer(message, self.strings["file_part_list"].format(group), file=file)

    @loader.command()
    async def scam(self, message):
        """[–∏–º—è —à–æ—Ä—Ç–∫–∞—Ç–∞] [id/file] [—Å—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞] —à–æ—Ä—Ç–∫–∞—Ç –¥–ª—è –∑–∞–Ω–æ—Å–∞ —á–µ–ª–æ–≤–µ–∫–∞ –≤ —Å–∫–∞–º–µ—Ä–æ–≤"""
        args = utils.get_args(message)
        if not args or len(args) < 2:
            return await utils.answer(message, self.strings["noargs"])
        reply = await message.get_reply_message()
        reply = reply if not isinstance(reply, MessageService) else None
        if len(args) == 2:
            if not reply:
                return await utils.answer(message, self.strings["noargs"])
            
            shortcut, account = args
            link = reply.link()
        else:
            shortcut, account, link = args

        shortcuts = self.get("shortcuts", {})
        if not shortcut in shortcuts:
            return await utils.answer(message, self.strings["no_shct"].format(shortcut))

        ids = []
        if account == "file":
            if not reply or reply.media is None:
                return await utils.answer(message, self.strings["answer_file"])
            file = (await reply.download_media(bytes)).decode()
            lines = [x for x in file.splitlines() if x.strip().isdigit()]
            ids.extend(lines)
        else: 
            account = int(account)
            ids.append(account)

        if not ids:
            return await utils.answer(message, self.strings["no_ids"])
        
        await utils.answer(message, self.strings["entr_to_base"].format(len(ids)))
        
        for acc_id in ids:
            await self.client.send_message(
                self.config["send_scam_chat"],
                shortcuts[shortcut].format(
                    account=acc_id,
                    link=link,
                )
            )
            await asyncio.sleep(SCAM_DELAY)
        
        await utils.answer(message, self.strings["succes"])
    
    @loader.command()
    async def addscam(self, message):
        """[–∏–º—è —à–æ—Ä—Ç–∫–∞—Ç–∞] [—Å—Ç—Ä–æ–∫–∞]

        –ü—Ä–∏–º–µ—Ä:
        .addscam scamgroup /scam {account} 2 –£—á–∞—Å—Ç–Ω–∏–∫ —Å–∫–∞–º-—Ç–∏–º—ã {link}

        –ü—Ä–∏ –≤—ã–∑–æ–≤–µ .scam scamgroup 1226061707 https://t.me/cht/25
        –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤ —á–∞—Ç:
        /scam 1226061707 2 –£—á–∞—Å—Ç–Ω–∏–∫ —Å–∫–∞–º-—Ç–∏–º—ã https://t.me/cht/25
        """
        args = utils.get_args_raw(message).split(maxsplit=1)
        if len(args) != 2:
            return await utils.answer(message, self.strings["noargs"])
        
        if "{account}" not in args[1] or "{link}" not in args[1]:
            return await utils.answer(message, self.strings["inv_shct"])

        shortcuts = self.get("shortcuts", {})
        shortcuts[args[0]] = args[1]
        self.set("shortcuts", shortcuts)

        await utils.answer(message, self.strings["shct_set"].format(args[0]))

    @loader.command()
    async def delscam(self, message):
        """[–∏–º—è —à–æ—Ä—Ç–∫–∞—Ç–∞] —É–¥–∞–ª–∏—Ç—å —à–æ—Ä—Ç–∫–∞—Ç"""
        args = utils.get_args(message)
        if not args:
            return await utils.answer(message, self.strings["noargs"])
        name = args[0]

        shortcuts = self.get("shortcuts", {})
        if not name in shortcuts:
            return await utils.answer(message, self.strings["no_shct"].format(name))
        else:
            shortcuts.pop(name)
            self.set("shortcuts", shortcuts)

        await utils.answer(message, self.strings["shct_rm"].format(name))