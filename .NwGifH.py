__version__ = ("–ß–¢–û–û–û–û–û–û–û–û–û–û","–ß–ò–¢–´","–í –ú–ê–ô–ù–ö–†–ê–§–¢üò®üò®üò®üò®üò®üò®") ###–î–∞, —ç—Ç–æ -- –∫–æ–ø–∏—Ä–∫–∞ –º–æ–¥—É–ª—è HornyHarem. –Ø –Ω–µ –≤–∏–Ω–æ–≤–∞—Ç, —á—Ç–æ —É —Ä–∞–∑—Ä–∞–±–∞ –≤–æ –≤—Å–µ–π —Å–≤—è–∑–∫–µ –±–æ—Ç–æ–≤ –∫–æ–¥ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π.ü•∞

#‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
#‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñë‚ñë‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
#‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë
#‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë
#‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
#‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
#‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
#‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñî‚ñà‚ñë‚ñë‚ñà‚ñë‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë
#‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
#‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñÅ‚ñà‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
#‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
#‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñë‚ñà‚ñà‚ñà‚ñë‚ñà‚ñà‚ñà‚ñë‚ñà‚ñà‚ñà‚ñë‚ñà‚ñà‚ñà
#‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñë‚ñà‚ñë‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë‚ñà‚ñë‚ñë‚ñë‚ñà‚ñë‚ñà
#‚ñë‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë‚ñà‚ñà‚ñà‚ñë‚ñë‚ñà‚ñë‚ñë‚ñà‚ñë‚ñà‚ñë‚ñà‚ñë‚ñà
#‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë‚ñà‚ñë‚ñà‚ñë‚ñà‚ñë‚ñà
#‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñë‚ñà‚ñà‚ñà‚ñë‚ñë‚ñà‚ñë‚ñë‚ñà‚ñà‚ñà‚ñë‚ñà‚ñà‚ñà



# meta developer: @nullmod

from telethon.tl.functions.channels import JoinChannelRequest, LeaveChannelRequest
from telethon.tl.functions.contacts import BlockRequest, UnblockRequest
from hikkatl.tl.functions.messages import ImportChatInviteRequest
from hikkatl.tl.types import Message
from .. import loader, utils
import asyncio
import time
import re

@loader.tds
class GifHarem(loader.Module):
    """Automatization module for @GIFgarem_bot"""
    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "abG",
                False,
                "–ê–≤—Ç–æ–±–æ–Ω—É—Å(/bonus, –±–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫–∏, 'lights out')",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "Gcatch_output",
                True,
                "–í—ã–≤–æ–¥–∏—Ç—å –≤–∞–π—Ñ—É?(–ø—Ä–∏ –ª–æ–≤–ª–µ)",
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "catch",
                False,
                "–Ø –ª–æ–≤–ª—é –≤–∞–π—Ñ—É?",
                validator=loader.validators.Boolean(),
            ),
        )

    strings = {
        "name": "GifHarem"
    }
    async def client_ready(self):
        self.id = 7084965046
        
    def getmarkup(self):
        return [
                [
                    {
                        "text": "[‚ùå] –ê–≤—Ç–æ–±–æ–Ω—É—Å" if self.config["abG"] else "[‚úîÔ∏è] –ê–≤—Ç–æ–±–æ–Ω—É—Å", 
                        "callback": self.callback_handler,
                        "args": ("abG",)
                    }
                ],
                [
                    {
                        "text":"[‚ùå] –ê–≤—Ç–æ–ª–æ–≤–ª—è" if self.config["catch"] else "[‚úîÔ∏è] –ê–≤—Ç–æ–ª–æ–≤–ª—è",
                        "callback":self.callback_handler,
                        "args": ("catch",)
                    },
                    {
                        "text":"[‚ùå] –í—ã–≤–æ–¥ –≤–∞–π—Ñ—É" if self.config["Gcatch_output"] else "[‚úîÔ∏è] –í—ã–≤–æ–¥ –≤–∞–π—Ñ—É", 
                        "callback":self.callback_handler,
                        "args": ("Gcatch_output",)
                    }
                ],
                [
                    {
                        "text":"üîª –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é", 
                        "callback":self.callback_handler,
                        "args": ("close",)
                    }
                ]
            ]

    ########loop########
    @loader.loop(interval=1, autostart=True)
    async def check_loop(self):
        if self.config["abG"] and (not self.get("ABonus_timeG") or (time.time() - self.get("ABonus_timeG")) >= 3600*4):
            await self.client.send_message("me", —Ä–∞–±–æ—Ç–∞–µ–º-—Ä–∞–±–æ—Ç–∞–µ–º)
            await self.autobonus()
            self.set("ABonus_timeG", int(time.time()))
    ########loop########

    ########–õ–æ–≤–µ—Ü########
    @loader.watcher("only_messages","only_media")
    async def watcher(self, message: Message):
        """Watcher"""
        if self.config["catch"] and message.sender_id == self.id and (not self.get("Gcatcher_time") or int(time.time()) - int(self.get("Gcatcher_time")) > 14400):
            if "–∑–∞–±–ª—É–¥–∏–ª–∞—Å—å" in message.text.lower():
                try:
                    await message.click()
                    msgs = await message.client.get_messages(message.chat_id, limit=4)
                    for msg in msgs:
                        if self.config["Gcatch_output"] and msg.mentioned and "–∑–∞–±—Ä–∞–ª–∏" in msg.text:
                            match = re.search(r", –í—ã –∑–∞–±—Ä–∞–ª–∏ (.+?)\. –í–∞–π—Ñ—É", msg.text)
                            waifu = match.group(1)
                            caption = f"{waifu} –≤ –≤–∞—à–µ–º –≥–∞—Ä–µ–º–µ! <emoji document_id=5395592707580127159>üòé</emoji>"
                            await self.client.send_file(self.id, caption=caption, file=message.media)
                            self.set("Gcatcher_time", int(time.time()))
                except Exception as e:
                    pass
                        
    # @loader.command()
    # async def catchGH(self, message):
    #     """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –ª–æ–≤–ª–∏. –í—ã–≤–æ–¥ –∞—Ä—Ç–∞ —É–∫—Ä–∞–¥–µ–Ω–Ω–æ–π –≤–∞–π—Ñ—É –≤ –ª—Å –±–æ—Ç–∞"""
    #     self.state = not self.state
    #     if not hasattr(self, "last_time"):
    #         self.last_time = 1226061708
    #     await message.edit(f"{'<emoji document_id=5954175920506933873>üë§</emoji> –Ø –ª–æ–≤–ª—é –≤–∞–π—Ñ—É.' if self.state else '<emoji document_id=5872829476143894491>üö´</emoji> –Ø –Ω–µ –ª–æ–≤–ª—é –≤–∞–π—Ñ—É.'}")
    # @loader.command()
    # async def catchGH_output(self, message):
    #     """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤—ã–≤–æ–¥ –∞—Ä—Ç–∞ —É–∫—Ä–∞–¥–µ–Ω–Ω–æ–π –≤–∞–π—Ñ—É."""
    #     self.outptt = not self.outptt
    #     await message.edit(f"{'<emoji document_id=5877530150345641603>üë§</emoji> –Ø –ø–æ–∫–∞–∑—ã–≤–∞—é –≤–∞–π—Ñ—É.' if self.outptt else '<emoji document_id=5872829476143894491>üö´</emoji> –Ø –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—é –≤–∞–π—Ñ—É.'}")
    ########–õ–æ–≤–µ—Ü########


    ########–ó–∞—Ä–∞–±–æ—Ç–æ–∫########
    #@loader.command()
    async def autobonus(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–±–∏—Ä–∞–µ—Ç –±–æ–Ω—É—Å(–∞ —Ç–∞–∫–∂–µ –±–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –∏ –æ—Ç—ã–≥—Ä—ã–≤–∞–µ—Ç 3 –∏–≥—Ä—ã –≤ /lout) –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞"""
        await self.client.send_message("me","–Ω–∞—á–∞–ª–æ –ø–∏–∑–¥–µ—Ü–∞")
        wait_boost = False
        async with self._client.conversation(self.id) as conv:
            await conv.send_message("/bonus")
            try:
                r = await conv.get_response()
            except:
                while True:
                    try:
                        r = await conv.get_response()
                        break
                    except:
                        pass
            if "–î–æ—Å—Ç—É–ø–µ–Ω –±–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫–∏" in r.text:
                await conv.send_message("/start flyer_bonus")
                try:
                    r = await conv.get_response()
                except:
                    while True:
                        try:
                            r = await conv.get_response()
                            break
                        except:
                            pass
                if "–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞" not in r.text:
                    to_leave = []
                    to_block = []
                    if r.reply_markup:
                        a = r.buttons
                        for i in a:
                            for button in i:
                                if button.url:
                                    if "/start?" in button.url:
                                        continue
                                    if "t.me/boost" in button.url:
                                        wait_boost = True
                                        continue
                                    if "t.me/+" in button.url:
                                        try:
                                            await self.client(ImportChatInviteRequest(button.url.split("+")[-1]))
                                        except:
                                            await asyncio.sleep(2)
                                            await self.client(JoinChannelRequest(button.url))
                                    url = button.url
                                    if "?" in button.url:
                                        url = button.url.split("?")[0]
                                    entity = await self.client.get_entity(url)
                                    if hasattr(entity,'broadcast'):
                                        await self.client(JoinChannelRequest(button.url))
                                        to_leave.append(entity.id)
                                    elif hasattr(entity,'bot'):
                                        try:
                                            await self.client(UnblockRequest(entity.username))
                                        except:
                                            print('–±–ª–∏–Ω')
                                        await self.client.send_message(entity,"/start")
                                        to_block.append(entity.username)
                        flyer_messages = await self.client.get_messages(self.id, limit=1)
                        if wait_boost:
                            await asyncio.sleep(120)
                        for m in flyer_messages:
                            await asyncio.sleep(5)
                            await m.click()
                        for bot in to_block:
                            await self.client(BlockRequest(bot))
                            await self.client.delete_dialog(bot)
                        for channel in to_leave:
                            try:
                                await self.client(LeaveChannelRequest(channel))
                            except:
                                pass
                count = 0
                if not self.get("Glast_lout") or int(time.time()) - self.get("Glast_lout") > 86400:
                    while count <= 2:
                        await conv.send_message("/lout")
                        try:
                            r = await conv.get_response()
                        except:
                            while True:
                                try:
                                    r = await conv.get_response()
                                    break
                                except:
                                    pass
                        if r.reply_markup:
                            m = await r.respond(".")
                            await self.lightsoutW(m,r)
                            await m.delete()
                            self.set("Glast_lout", int(time.time()))
                            count += 1
                        else:
                            break
    @loader.command()
    async def GifHaremMenu(self,message):
        """–ú–µ–Ω—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        await self.inline.form(
            message = message, 
            text = "–ú–µ–Ω—é –¥–ª—è @Horny_GaremBot", 
            reply_markup = self.getmarkup()
        )

    async def callback_handler(self, callback, data):
        if data == "close":
            await callback.delete()
        elif data:
            self.config[data] = not self.config[data]
            if data == "abG":
                self.check_loop.start() if self.config[data] else self.check_loop.stop()
            await callback.edit(reply_markup=self.getmarkup())
        

    
    @loader.command()
    async def lightsoutW(self, message, r=None):
        """[–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ —Å –ø–æ–ª–µ–º] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ—à–∞–µ—Ç Lights Out"""
        if message.is_reply or r:
            if not r: 
                r = await message.get_reply_message()
            if r.reply_markup:
                a = r.buttons
                pattern = []
                for i in a:
                    for m in i:
                        t = m.text
                        if t == "üåö":
                            pattern.append(0)
                        elif t == "üåû":
                            pattern.append(1)
                        else:
                            None
            else:
                await message.edit("<emoji document_id=5299030091735525430>‚ùóÔ∏è</emoji> –ù–µ –≤–∏–∂—É –ø–æ–ª—è –∏–≥—Ä—ã. –≠—Ç–æ —Ç–æ—á–Ω–æ —Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ?")
                return
             
        else:
            await message.edit("<emoji document_id=5299030091735525430>‚ùóÔ∏è</emoji> –ü—Ä–æ–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∏–≥—Ä—É.")
            return
        if pattern:
            await message.edit("<emoji document_id=5472146462362048818>üí°</emoji>")
            clicks = await self.solution(pattern)
            if not clicks:
                await message.edit("–ò–¥–∏ –∫–æ–¥ —Ç—Ä–µ–π—Å–∏ –≥–µ–Ω–∏–π.")
                return #*—Å–º–∞—á–Ω—ã–π –ø–∏–Ω–æ–∫ –∫–æ–¥–µ—Ä—É –ø–æ–¥ –∑–∞–¥.*
            for i in range(len(clicks)):
                if clicks[i] == 1:
                    r = await self.client.get_messages(r.chat_id,ids=r.id)
                    await r.click(i)
            await message.edit("<emoji document_id=5395592707580127159>üòé</emoji> –ì–æ—Ç–æ–≤–æ.")
        else:
            await message.edit("<emoji document_id=5299030091735525430>‚ùóÔ∏è</emoji> –¢—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ –Ω–∞ –ø–æ–ª–µ –∏–≥—Ä—ã.")
            return
    #///|
    #///|
    #///|
    #///ÀÖ
    async def solution(self, pole):
        n = len(pole)
        for num in range(2**n):
            binary_string = bin(num)[2:].zfill(n)
            presses = [int(char) for char in binary_string]
            temp = pole[:]
        
            for i in range(n):
                if presses[i]:
                    temp[i] ^= 1
                    if i % 3 > 0: temp[i - 1] ^= 1
                    if i % 3 < 2: temp[i + 1] ^= 1
                    if i >= 3: temp[i - 3] ^= 1
                    if i < 6: temp[i + 3] ^= 1
        
            if sum(temp) == 0:
                return presses

        return None
    ########–ó–∞—Ä–∞–±–æ—Ç–æ–∫########
