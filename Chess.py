__version__ = ("1","0","0")
#‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
#‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñë‚ñë‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
#‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë
#‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë
#‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
#‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
#‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
#‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñî‚ñà‚ñë‚ñë‚ñà‚ñë‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë
#‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
#‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñÅ‚ñà‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
#‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
#‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñë‚ñà‚ñà‚ñà‚ñë‚ñà‚ñà‚ñà‚ñë‚ñà‚ñà‚ñà‚ñë‚ñà‚ñà‚ñà
#‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñë‚ñà‚ñë‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë‚ñà‚ñë‚ñë‚ñë‚ñà‚ñë‚ñà
#‚ñë‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë‚ñà‚ñà‚ñà‚ñë‚ñë‚ñà‚ñë‚ñë‚ñà‚ñë‚ñà‚ñë‚ñà‚ñë‚ñà
#‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë‚ñà‚ñë‚ñà‚ñë‚ñà‚ñë‚ñà
#‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñë‚ñà‚ñà‚ñà‚ñë‚ñë‚ñà‚ñë‚ñë‚ñà‚ñà‚ñà‚ñë‚ñà‚ñà‚ñà



# meta developer: @nullmod
# requires: python-chess
from .. import loader, utils
import asyncio, random, chess



@loader.tds
class Chess(loader.Module):
    """–®–∞—Ö–º–∞—Ç—ã –¥–ª—è –∏–≥—Ä—ã –≤–¥–≤–æ—ë–º."""
    strings = {
        "name": "Chess"
    }
    #####–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ#####

    async def client_ready(self):
        self.board = {}
        self.symbols = {
    "r": "‚ôú", "n": "‚ôû", "b": "‚ôù", "q": "ùóæ", "k": "‚ôö", "p": "‚ôü", "R": "‚ôñ", "N": "‚ôò", "B": "‚ôó", "Q": "ùó§", "K": "‚ôî", "P": "‚ôô",
        }
        # self.symbolsL = {
        #     "r": "ùóø", "n": "ùóª", "b": "ùóØ", "q": "ùóæ", "k": "ùó∏", "p": "ùóΩ",
        #     "R": "ùó•", "N": "ùó°", "B": "ùóï", "Q": "ùó§", "K": "ùóû", "P": "ùó£",
        # } –±—É–¥—Ç–æ –∫—Ç–æ-—Ç–æ –±—É–¥–µ—Ç –∑–∞ –±—É–∫–≤—ã –∏–≥—Ä–∞—Ç—å...
        self.chsn = False
        self.saymyname = (await self.client.get_me()).first_name
        self.reverse = False

    def purgeSelf(self):
        self.board = {}
        self.chsn = False
        self.reverse = False
        self.Board = None
        self.you_play = None
        self.you_n_me = []
        self.places = []
        self.message = None
        self.opp_id = None
        self.opp_name = None
        self.checkmate = False
        self.stalemate = False

    #####–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ#####


    #####–ò–≥—Ä–∞#####

    @loader.command() 
    async def chess(self, message):
        """[reply/username/id] –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —á–µ–ª–æ–≤–µ–∫—É —Å—ã–≥—Ä–∞—Ç—å –ø–∞—Ä—Ç–∏—é –≤ —á–∞—Ç–µ"""
        if self.board:
            await message.edit("–ü–∞—Ä—Ç–∏—è —É–∂–µ –≥–¥–µ-—Ç–æ –∑–∞–ø—É—â–µ–Ω–∞. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏–ª–∏ —Å–±—Ä–æ—Å—å—Ç–µ –µ—ë —Å <code>purgegame</code>")
            return
        self.message = message
        if message.is_reply:
            r = await message.get_reply_message()
            opponent = r.sender
            self.opp_id = opponent.id
            self.opp_name = opponent.first_name
        else:
            args = utils.get_args(message)
            if len(args)==0:
                await message.edit("–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Å –∫–µ–º –∏–≥—Ä–∞—Ç—å")
                return
            opponent = args[0]
            try:
                if opponent.isdigit():
                    self.opp_id = int(opponent)
                    opponent = await self.client.get_entity(self.opp_id)
                    self.opp_name = opponent.first_name
                else:
                    opponent = await self.client.get_entity(opponent)
                    self.opp_name = opponent.first_name
                    self.opp_id = opponent.id
            except:
                await message.edit("–Ø –Ω–µ –Ω–∞—Ö–æ–∂—É —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return
        if self.opp_id == self.message.sender_id:
            await message.edit("–û–¥–∏–Ω–æ—á–Ω—ã–µ —à–∞—Ö–º–∞—Ç—ã? –ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–µ—Ç.")
            return
        self.you_n_me = [self.opp_id, self.message.sender_id]
        await self.inline.form(message = message, text = f"<a href='tg://user?id={self.opp_id}'>{self.opp_name}</a>, –≤–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ —Å—ã–≥—Ä–∞—Ç—å –ø–∞—Ä—Ç–∏—é —à–∞—Ö–º–∞—Ç, –ø—Ä–∏–º–∏—Ç–µ?", reply_markup = [[
                {"text": "–ü—Ä–∏–Ω–∏–º–∞—é", "callback": self.ans, "args":("y",)},
                {"text": "–ù–µ—Ç", "callback": self.ans, "args":("n",)}],
                [{"text": "–í–ê–ñ–ù–û","action":"answer","show_alert":True,"message":"–í –∏–≥—Ä–µ –ø–æ–∫–∞–∑–∞–Ω—ã —Ñ–∏–≥—É—Ä—ã –≤ –≤–∏–¥–µ ASCII —Å–∏–º–≤–æ–ª–æ–≤, –Ω–æ –Ω–∞ —Ç—ë–º–Ω–æ–º —Ñ–æ–Ω–µ(–±–∞–∑–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –±–æ—Ç–æ–≤) —Ñ–∏–≥—É—Ä—ã –µ–¥–≤–∞ —Ä–∞–∑–ª–∏—á–∏–º—ã(–∫–∞–∫ ‚ôï‚ôõ –Ω–∞–ø—Ä–∏–º–µ—Ä).\n\n–î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ä–∞–∑–ª–∏—á–∏—è –æ–Ω–∏ –±—ã–ª–∏ –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ Q(–±–µ–ª) –∏ q(—á—ë—Ä–Ω)",}
            ]], disable_security = True, on_unload=self.outdated()
        )
    @loader.command() 
    async def purgeGame(self, message):
        """–ì—Ä—É–±–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø–∞—Ä—Ç–∏—é, –æ—á–∏—Å—Ç–∏–≤ –í–°–ï —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–µ–π –¥–∞–Ω–Ω—ã–µ"""
        self.purgeSelf()
        await message.edit("–î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")

    async def ans(self, call, data):
        if call.from_user.id == self.message.sender_id:
            await call.answer("–î–∞–π —á–µ–ª–æ–≤–µ–∫—É –æ—Ç–≤–µ—Ç–∏—Ç—å!")
            return
        if call.from_user.id not in self.you_n_me:
            await call.answer("–ù–µ —Ç–µ–±–µ –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç –∂")
            return
        if data == 'y':
            self.Board = chess.Board()
            
            await call.edit(text="–í—ã–±–∏—Ä–∞—é —Å—Ç–æ—Ä–æ–Ω—ã...")
            await asyncio.sleep(0.5)
            self.you_play = self.ranColor()
            text = self.sttxt()
            await call.edit(text="–ì–æ—Ç–æ–≤–æ. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å–∫–∏")
            await asyncio.sleep(0.5)
            await self.LoadBoard(text, call)
        else:
            await call.edit(text="–û—Ç–∫–ª–æ–Ω–µ–Ω–æ.")

    #####–ò–≥—Ä–∞#####


    #####–î–æ—Å–∫–∞#####

    async def LoadBoard(self, text, call):
        #board = str(self.Board).split("\n")
        for row in range(1,9):
            rows = []
            for col in "ABCDEFGH":
                coord = f"{col}{row}"
                piece = self.Board.piece_at(chess.parse_square(coord.lower()))
                self.board[coord] =  self.symbols[piece.symbol()] if piece else " "
                
                
                
        btns = []
        for row in range(1,9):
            rows = []
            for col in "ABCDEFGH":
                coord = f"{col}{row}"
                rows.append({"text": f"{self.board[f'{col}{row}']}", "callback": self.clicks_handle, "args":(coord,)})
            btns.append(rows)

        #await self.client.send_message(self.message.chat_id, f"–∑–∞–ø—É—Å–∫ –¥–æ—Å–∫–∏ –±–µ–∑ —Ç–æ—á–µ–∫. self.chsn={self.chsn},coord={coord.lower()},self.reverse{self.reverse},self.places={self.places if hasattr(self,'places') else None}")

        await call.edit(text = text,
            reply_markup = btns[::-1],
            disable_security = True
        )

    async def UpdBoard(self, call):
        for row in range(1,9):
            rows = []
            for col in "ABCDEFGH":
                coord = f"{col}{row}"
                if any(place[-2:] == coord.lower() for place in self.places):
                        self.board[coord] = "‚úñ" if (move := next((chess.Move.from_uci(p) for p in self.places if p[-2:] == coord.lower()), None)) and self.Board.is_capture(move) else "‚óè"
                else:
                    piece = self.Board.piece_at(chess.parse_square(coord.lower()))
                    self.board[coord] =  self.symbols[piece.symbol()] if piece else " "
                
                
        text = self.sttxt()  
        btns = []
        for row in range(1,9):
            rows = []
            for col in "ABCDEFGH":
                coord = f"{col}{row}"
                rows.append({"text": f"{self.board[f'{col}{row}']}", "callback": self.clicks_handle, "args":(coord,)})
            btns.append(rows)
        #await self.client.send_message(self.message.chat_id, f"—Å–æ–∑–¥–∞–ª–∏ –∫–Ω–æ–ø–∫–∏. self.chsn={self.chsn},coord={coord.lower()},self.reverse{self.reverse},self.places={self.places if hasattr(self,'places') else None}")

        await call.edit(text = text,
            reply_markup = btns[::-1],
            disable_security = True
        )


    #####–î–æ—Å–∫–∞#####


    #####–•–æ–¥—ã#####

    async def clicks_handle(self, call, coord):
        if call.from_user.id not in self.you_n_me:
            await call.answer("–ü–∞—Ä—Ç–∏—è –Ω–µ –≤–∞—à–∞")
            return
        current_player = self.message.sender_id if (self.you_play == "w") ^ self.reverse else self.opp_id
        if call.from_user.id != current_player:
            await call.answer("–ö—ã—à –æ—Ç –º–æ–∏—Ö —Ñ–∏–≥—É—Ä")
            return
        if self.checkmate or self.stalemate:
            await call.answer("–ü–∞—Ä—Ç–∏—è –æ–∫–æ–Ω—á–µ–Ω–∞. –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Ö–æ–¥–æ–≤ –Ω–µ—Ç.")
            
        if self.chsn == False:
            #await self.client.send_message(self.message.chat_id, f"–Ω–µ –≤—ã–±—Ä–∞–Ω–æ. self.chsn={self.chsn},coord={coord.lower()},self.reverse{self.reverse},self.places={self.places if hasattr(self,'places') else None}")
            await self.checkMove(call,coord)
        else:
            #if self.reverse:
            #await self.client.send_message(self.message.chat_id, f"–≤—ã–±—Ä–∞–Ω–æ. self.chsn={self.chsn},coord={coord.lower()},self.reverse{self.reverse},self.places={self.places if hasattr(self,'places') else None}")
            matching_place = next((place for place in self.places if place[-2:] == coord.lower()), None)
            if matching_place:
                #await self.client.send_message(self.message.chat_id, f"—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ. self.chsn={self.chsn},coord={coord.lower()},self.reverse{self.reverse},self.places={self.places if hasattr(self,'places') else None}")
                self.Board.push(chess.Move.from_uci(matching_place))
                self.reverse = not self.reverse
                self.chsn = False
                #await call.answer("–ø–æ—Ç–æ–º")
            else:
                #await self.client.send_message(self.message.chat_id, f"–Ω–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ. self.chsn={self.chsn},coord={coord.lower()},self.reverse{self.reverse},self.places={self.places if hasattr(self,'places') else None}")
                prev_place = next((place for place in self.places if place[:-2] == coord.lower()), None)
                text = self.sttxt()
                if prev_place:
                    self.chsn = False
                    self.places = []
                    await self.LoadBoard(text,call)
                    return
                if not await self.checkMove(call,coord):
                    #await self.client.send_message(self.message.chat_id, f"–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ö–æ–¥ —Å–æ—Å–æ(—Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö). self.chsn={self.chsn},coord={coord.lower()},self.reverse{self.reverse},self.places={self.places if hasattr(self,'places') else None}")
                    self.chsn = False
                    self.places = []
                    await self.LoadBoard(text,call)
                    return
                else:
                    return
                # else:
                #     await self.checkMove(call,coord)
            text = self.sttxt()
            await self.LoadBoard(text,call)
            #else:

    async def checkMove(self,call,coord):
        if self.Board.piece_at(chess.parse_square(coord.lower())):
            square = chess.parse_square(coord.lower())
            moves = [move for move in self.Board.legal_moves if move.from_square == square]
            self.places = [p for p in [move.uci() for move in moves]]
            if not self.places:
                await call.answer("–î–ª—è —ç—Ç–æ–π —Ñ–∏–≥—É—Ä—ã –Ω–µ—Ç —Ö–æ–¥–æ–≤!")
                #await self.client.send_message(self.message.chat_id, f"–¥–ª—è —Ñ–∏–≥—É—Ä—ã –Ω–µ—Ç —Ö–æ–¥–æ–≤. self.chsn={self.chsn},coord={coord.lower()},self.reverse{self.reverse},self.places={self.places if hasattr(self,'places') else None}")
                return None
        else:
            await call.answer("–¢—É—Ç –Ω–µ—Ç —Ñ–∏–≥—É—Ä—ã")
            self.places = []
            self.chsn = False
            #await self.client.send_message(self.message.chat_id, f"–Ω–µ–º–∞ —Ñ–∏–≥—É—Ä—ã —Ç—É—Ç. self.chsn={self.chsn},coord={coord.lower()},self.reverse{self.reverse},self.places={self.places if hasattr(self,'places') else None}")
            return None
        
        self.chsn = True
        ##await self.client.send_message(self.message.chat_id, f"–ü—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É, –≤—ã–≤–æ–¥. self.chsn={self.chsn},coord={coord.lower()},self.reverse{self.reverse},self.places={self.places if hasattr(self,'places') else None}")
        await call.answer(f"–°—Ç–∞–≤–ª—é {self.places}")
        await self.UpdBoard(call)
        return True

    def sttxt(self):
        check = False
        self.checkmate = False
        self.stalemate = False
        self.fifty = False
        if self.Board.is_checkmate():
            self.checkmate = True
        elif self.Board.is_check():
            check = True
        elif self.Board.is_stalemate():
            self.stalemate = True
        elif self.Board.can_claim_fifty_moves():
            board.outcome()
            self.fifty = True
        if not self.checkmate and not check and not self.stalemate:
            if self.reverse:
                if self.you_play == "w":
                    return f"‚ôî –ë–µ–ª—ã–µ - {self.saymyname}\nüëâ ‚ôö –ß—ë—Ä–Ω—ã–µ - {self.opp_name} (–≤–∞—à —Ö–æ–¥)\n\nw - –±–µ–ª—ã–µ —Ñ–∏–≥—É—Ä—ã, \nb - —á—ë—Ä–Ω—ã–µ —Ñ–∏–≥—É—Ä—ã."
                else:
                    return f"‚ôî –ë–µ–ª—ã–µ - {self.opp_name}\nüëâ ‚ôö –ß—ë—Ä–Ω—ã–µ - {self.saymyname} (–≤–∞—à —Ö–æ–¥)\n\nw - –±–µ–ª—ã–µ —Ñ–∏–≥—É—Ä—ã, \nb - —á—ë—Ä–Ω—ã–µ —Ñ–∏–≥—É—Ä—ã."
            else:
                if self.you_play == "w":
                    return f"üëâ ‚ôî –ë–µ–ª—ã–µ - {self.saymyname} (–≤–∞—à —Ö–æ–¥)\n‚ôö –ß—ë—Ä–Ω—ã–µ - {self.opp_name}\n\nw - –±–µ–ª—ã–µ —Ñ–∏–≥—É—Ä—ã, \nb - —á—ë—Ä–Ω—ã–µ —Ñ–∏–≥—É—Ä—ã."
                else:
                    return f"üëâ ‚ôî –ë–µ–ª—ã–µ - {self.opp_name} (–≤–∞—à —Ö–æ–¥)\n‚ôö –ß—ë—Ä–Ω—ã–µ - {self.saymyname}\n\nw - –±–µ–ª—ã–µ —Ñ–∏–≥—É—Ä—ã, \nb - —á—ë—Ä–Ω—ã–µ —Ñ–∏–≥—É—Ä—ã."
        elif self.checkmate:
            if self.reverse:
                if self.you_play == "w":
                    return f"‚ôî –ë–µ–ª—ã–µ - {self.saymyname}\n‚ôö –ß—ë—Ä–Ω—ã–µ - {self.opp_name}\n–®–∞—Ö –∏ –º–∞—Ç! –ü–æ–±–µ–¥–∏–ª(–∞) {self.saymyname}"
                else:
                    return f"‚ôî –ë–µ–ª—ã–µ - {self.opp_name}\n‚ôö –ß—ë—Ä–Ω—ã–µ - {self.saymyname}\n–®–∞—Ö –∏ –º–∞—Ç! –ü–æ–±–µ–¥–∏–ª(–∞) {self.opp_name}"
            else:
                if self.you_play == "w":
                    return f"‚ôî –ë–µ–ª—ã–µ - {self.saymyname} \n‚ôö –ß—ë—Ä–Ω—ã–µ - {self.opp_name}\n–®–∞—Ö –∏ –º–∞—Ç! –ü–æ–±–µ–¥–∏–ª(–∞) {self.opp_name}"
                else:
                    return f"‚ôî –ë–µ–ª—ã–µ - {self.opp_name} \n‚ôö –ß—ë—Ä–Ω—ã–µ - {self.saymyname}\n–®–∞—Ö –∏ –º–∞—Ç! –ü–æ–±–µ–¥–∏–ª(–∞) {self.saymyname}"
        elif check:
            if self.reverse:
                if self.you_play == "w":
                    return f"‚ôî –ë–µ–ª—ã–µ - {self.saymyname}\nüëâ ‚ôö –ß—ë—Ä–Ω—ã–µ - {self.opp_name}\n–®–∞—Ö!\n\nw - –±–µ–ª—ã–µ —Ñ–∏–≥—É—Ä—ã, \nb - —á—ë—Ä–Ω—ã–µ —Ñ–∏–≥—É—Ä—ã."
                else:
                    return f"‚ôî –ë–µ–ª—ã–µ - {self.opp_name}\nüëâ ‚ôö –ß—ë—Ä–Ω—ã–µ - {self.saymyname}\n–®–∞—Ö!\n\nw - –±–µ–ª—ã–µ —Ñ–∏–≥—É—Ä—ã, \nb - —á—ë—Ä–Ω—ã–µ —Ñ–∏–≥—É—Ä—ã."
            else:
                if self.you_play == "w":
                    return f"üëâ ‚ôî –ë–µ–ª—ã–µ - {self.saymyname} \n‚ôö –ß—ë—Ä–Ω—ã–µ - {self.opp_name}\n–®–∞—Ö!\n\nw - –±–µ–ª—ã–µ —Ñ–∏–≥—É—Ä—ã, \nb - —á—ë—Ä–Ω—ã–µ —Ñ–∏–≥—É—Ä—ã."
                else:
                    return f"üëâ ‚ôî –ë–µ–ª—ã–µ - {self.opp_name} \n‚ôö –ß—ë—Ä–Ω—ã–µ - {self.saymyname}\n–®–∞—Ö!\n\nw - –±–µ–ª—ã–µ —Ñ–∏–≥—É—Ä—ã, \nb - —á—ë—Ä–Ω—ã–µ —Ñ–∏–≥—É—Ä—ã."
        elif self.stalemate:
            if self.reverse:
                if self.you_play == "w":
                    return f"‚ôî –ë–µ–ª—ã–µ - {self.saymyname}\n‚ôö –ß—ë—Ä–Ω—ã–µ - {self.opp_name}\n–ü–∞—Ç. –ù–∏—á—å—è"
                else:
                    return f"‚ôî –ë–µ–ª—ã–µ - {self.opp_name}\n‚ôö –ß—ë—Ä–Ω—ã–µ - {self.saymyname}\n–ü–∞—Ç. –ù–∏—á—å—è"
            else:
                if self.you_play == "w":
                    return f"‚ôî –ë–µ–ª—ã–µ - {self.saymyname} \n‚ôö –ß—ë—Ä–Ω—ã–µ - {self.opp_name}\n–ü–∞—Ç. –ù–∏—á—å—è"
                else:
                    return f"‚ôî –ë–µ–ª—ã–µ - {self.opp_name} \n‚ôö –ß—ë—Ä–Ω—ã–µ - {self.saymyname}\n–ü–∞—Ç. –ù–∏—á—å—è"
        elif self.fifty:
            if self.reverse:
                if self.you_play == "w":
                    return f"‚ôî –ë–µ–ª—ã–µ - {self.saymyname}\n‚ôö –ß—ë—Ä–Ω—ã–µ - {self.opp_name}\n–ü—Ä–∞–≤–∏–ª–æ 50 —Ö–æ–¥–æ–≤. –Ω–∏—á—å—è"
                else:
                    return f"‚ôî –ë–µ–ª—ã–µ - {self.opp_name}\n‚ôö –ß—ë—Ä–Ω—ã–µ - {self.saymyname}\n–ü—Ä–∞–≤–∏–ª–æ 50 —Ö–æ–¥–æ–≤. –Ω–∏—á—å—è"
            else:
                if self.you_play == "w":
                    return f"‚ôî –ë–µ–ª—ã–µ - {self.saymyname} \n‚ôö –ß—ë—Ä–Ω—ã–µ - {self.opp_name}\n–ü—Ä–∞–≤–∏–ª–æ 50 —Ö–æ–¥–æ–≤. –Ω–∏—á—å—è"
                else:
                    return f"‚ôî –ë–µ–ª—ã–µ - {self.opp_name} \n‚ôö –ß—ë—Ä–Ω—ã–µ - {self.saymyname}\n–ü—Ä–∞–≤–∏–ª–æ 50 —Ö–æ–¥–æ–≤. –Ω–∏—á—å—è"


    #####–•–æ–¥—ã#####


    ##########
    async def outdated(self):
        self.purgeSelf()
        return


    def ranColor(self):
        return "w" if random.randint(1,2) == 1 else "b"
    ##########
